#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å SQLite –Ω–∞ MySQL –¥–ª—è FamilyWay +
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python migrate_sqlite_to_mysql.py
"""

import os
import sys
import django
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
BASE_DIR = Path(__file__).resolve().parent
sys.path.append(str(BASE_DIR))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'baybyway.settings')
django.setup()

from django.db import connections
from django.core.management import execute_from_command_line
import json

def check_sqlite_file():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ SQLite —Ñ–∞–π–ª–∞"""
    sqlite_path = BASE_DIR / 'db.sqlite3'
    if not sqlite_path.exists():
        print("‚ùå SQLite —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: db.sqlite3")
        return False
    print(f"‚úÖ SQLite —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω: {sqlite_path}")
    return True

def check_mysql_connection():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL"""
    try:
        # –í—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ SQLite –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        from django.conf import settings
        settings.DATABASES['default']['ENGINE'] = 'django.db.backends.sqlite3'
        settings.DATABASES['default']['NAME'] = BASE_DIR / 'db.sqlite3'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º SQLite
        from django.db import connection
        with connection.cursor() as cursor:
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
            tables = cursor.fetchall()
            print(f"‚úÖ SQLite –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: –Ω–∞–π–¥–µ–Ω–æ {len(tables)} —Ç–∞–±–ª–∏—Ü")
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ MySQL
        settings.DATABASES['default']['ENGINE'] = 'django.db.backends.mysql'
        settings.DATABASES['default']['NAME'] = 'baybyway_production'
        settings.DATABASES['default']['USER'] = 'user_bayby1'
        settings.DATABASES['default']['PASSWORD'] = 'J@nym9494!'
        settings.DATABASES['default']['HOST'] = 'localhost'
        settings.DATABASES['default']['PORT'] = '3306'
        settings.DATABASES['default']['OPTIONS'] = {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
            'charset': 'utf8mb4',
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º MySQL
        with connection.cursor() as cursor:
            cursor.execute("SELECT 1")
            result = cursor.fetchone()
            print("‚úÖ MySQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: —É—Å–ø–µ—à–Ω–æ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL: {e}")
        return False

def export_sqlite_data():
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ SQLite"""
    print("üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite...")
    
    try:
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ SQLite
        from django.conf import settings
        settings.DATABASES['default']['ENGINE'] = 'django.db.backends.sqlite3'
        settings.DATABASES['default']['NAME'] = BASE_DIR / 'db.sqlite3'
        
        from django.db import connection
        with connection.cursor() as cursor:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'django_%';")
            tables = [row[0] for row in cursor.fetchall()]
            
            exported_data = {}
            
            for table in tables:
                print(f"  üìã –≠–∫—Å–ø–æ—Ä—Ç —Ç–∞–±–ª–∏—Ü—ã: {table}")
                cursor.execute(f"SELECT * FROM {table}")
                rows = cursor.fetchall()
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
                cursor.execute(f"PRAGMA table_info({table})")
                columns = [row[1] for row in cursor.fetchall()]
                
                exported_data[table] = {
                    'columns': columns,
                    'rows': rows
                }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON
            with open('sqlite_export.json', 'w', encoding='utf-8') as f:
                json.dump(exported_data, f, ensure_ascii=False, indent=2, default=str)
            
            print(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {len(tables)} —Ç–∞–±–ª–∏—Ü —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ sqlite_export.json")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        return False

def run_django_migrations():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ Django"""
    print("üîÑ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π Django...")
    
    try:
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ MySQL
        from django.conf import settings
        settings.DATABASES['default']['ENGINE'] = 'django.db.backends.mysql'
        settings.DATABASES['default']['NAME'] = 'baybyway_production'
        settings.DATABASES['default']['USER'] = 'user_bayby1'
        settings.DATABASES['default']['PASSWORD'] = 'J@nym9494!'
        settings.DATABASES['default']['HOST'] = 'localhost'
        settings.DATABASES['default']['PORT'] = '3306'
        settings.DATABASES['default']['OPTIONS'] = {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
            'charset': 'utf8mb4',
        }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
        execute_from_command_line(['manage.py', 'migrate'])
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ Django –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π: {e}")
        return False

def import_data_to_mysql():
    """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ MySQL"""
    print("üì• –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ MySQL...")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        with open('sqlite_export.json', 'r', encoding='utf-8') as f:
            exported_data = json.load(f)
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ MySQL
        from django.conf import settings
        settings.DATABASES['default']['ENGINE'] = 'django.db.backends.mysql'
        settings.DATABASES['default']['NAME'] = 'baybyway_production'
        settings.DATABASES['default']['USER'] = 'user_bayby1'
        settings.DATABASES['default']['PASSWORD'] = 'J@nym9494!'
        settings.DATABASES['default']['HOST'] = 'localhost'
        settings.DATABASES['default']['PORT'] = '3306'
        settings.DATABASES['default']['OPTIONS'] = {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
            'charset': 'utf8mb4',
        }
        
        from django.db import connection
        with connection.cursor() as cursor:
            for table_name, table_data in exported_data.items():
                print(f"  üìã –ò–º–ø–æ—Ä—Ç —Ç–∞–±–ª–∏—Ü—ã: {table_name}")
                
                columns = table_data['columns']
                rows = table_data['rows']
                
                if not rows:
                    print(f"    ‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ {table_name} –ø—É—Å—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue
                
                # –°–æ–∑–¥–∞–µ–º SQL –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
                placeholders = ', '.join(['%s'] * len(columns))
                columns_str = ', '.join(columns)
                insert_sql = f"INSERT INTO {table_name} ({columns_str}) VALUES ({placeholders})"
                
                try:
                    cursor.executemany(insert_sql, rows)
                    print(f"    ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(rows)} –∑–∞–ø–∏—Å–µ–π")
                except Exception as e:
                    print(f"    ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")
                    continue
        
        print("‚úÖ –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def cleanup_files():
    """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
    print("üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    
    files_to_remove = ['sqlite_export.json']
    
    for file_path in files_to_remove:
        if os.path.exists(file_path):
            os.remove(file_path)
            print(f"  üóëÔ∏è  –£–¥–∞–ª–µ–Ω: {file_path}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è —Å SQLite –Ω–∞ MySQL –¥–ª—è FamilyWay +")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    if not check_sqlite_file():
        return False
    
    if not check_mysql_connection():
        return False
    
    # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
    if not export_sqlite_data():
        return False
    
    # –ú–∏–≥—Ä–∞—Ü–∏–∏ Django
    if not run_django_migrations():
        return False
    
    # –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
    if not import_data_to_mysql():
        return False
    
    # –û—á–∏—Å—Ç–∫–∞
    cleanup_files()
    
    print("")
    print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    print("")
    print("üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É —Å–∞–π—Ç–∞: python manage.py runserver")
    print("2. –°–æ–∑–¥–∞–π—Ç–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: python manage.py createsuperuser")
    print("3. –°–æ–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã: python manage.py collectstatic")
    print("")
    print("üéâ FamilyWay + —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å MySQL!")
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
